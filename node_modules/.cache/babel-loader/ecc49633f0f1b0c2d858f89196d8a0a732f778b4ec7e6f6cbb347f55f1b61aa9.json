{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{Box,Typography,Button,Table,TableBody,TableCell,TableContainer,TableHead,TableRow,Paper,IconButton}from\"@mui/material\";import{Edit,Add}from\"@mui/icons-material\";import LoaderOverlay from\"../../components/LoaderOverlay\";import CustomAlert from\"../../components/CustomAlert\";import AsignarAdministrador from\"../../components/AsignarAdministrador\";import AdministradorForm from\"../../components/AdministradorForm\";import{API_URL}from'../../services/api';// Importa la constante API_URL\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Administradores(){const[administradores,setAdministradores]=useState([]);const[loading,setLoading]=useState(false);const[alert,setAlert]=useState({severity:\"\",message:\"\"});const[selectedAdmin,setSelectedAdmin]=useState(null);const[openForm,setOpenForm]=useState(false);const[openAssign,setOpenAssign]=useState(false);// 🔹 Obtener administradores desde la API\nconst fetchAdministradores=async()=>{setLoading(true);try{const token=localStorage.getItem(\"token\");if(!token)return;const response=await fetch(`${API_URL}/Administradores`,{headers:{Authorization:`Bearer ${token}`,Accept:\"application/json\"}});if(!response.ok)throw new Error(\"Error al obtener administradores\");const data=await response.json();setAdministradores(data);}catch(error){console.error(error);setAlert({severity:\"error\",message:\"Error al cargar administradores.\"});}finally{setLoading(false);}};useEffect(()=>{fetchAdministradores();},[]);// 🔹 Abrir modal de creación/edición\nconst handleOpenForm=function(){let admin=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;setSelectedAdmin(admin);setOpenForm(true);};const handleCloseForm=()=>{setOpenForm(false);fetchAdministradores();// Recargar lista después de cerrar el modal\n};// 🔹 Abrir modal de asignación\nconst handleOpenAssign=admin=>{setSelectedAdmin(admin);setOpenAssign(true);};// 🔹 Cerrar modal de asignación y recargar lista\nconst handleCloseAssign=()=>{setOpenAssign(false);fetchAdministradores();// Recargar lista después de asignar\n};return/*#__PURE__*/_jsxs(Box,{sx:{padding:3},children:[loading&&/*#__PURE__*/_jsx(LoaderOverlay,{}),/*#__PURE__*/_jsx(CustomAlert,{severity:alert.severity,message:alert.message}),/*#__PURE__*/_jsx(Typography,{variant:\"h4\",color:\"primary\",children:\"Administradores\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",startIcon:/*#__PURE__*/_jsx(Add,{}),sx:{mt:2},onClick:()=>handleOpenForm(),children:\"Agregar Administrador\"}),/*#__PURE__*/_jsx(TableContainer,{component:Paper,sx:{mt:3},children:/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Email\"})}),/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Gimnasios Asignados\"})}),/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Acciones\"})})]})}),/*#__PURE__*/_jsx(TableBody,{children:administradores.map(admin=>/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:admin.email}),/*#__PURE__*/_jsx(TableCell,{children:admin.assignedGyms.length>0?admin.assignedGyms.map(gym=>gym.nombre).join(\", \"):\"Ninguno\"}),/*#__PURE__*/_jsxs(TableCell,{children:[/*#__PURE__*/_jsx(IconButton,{color:\"warning\",onClick:()=>handleOpenForm(admin),children:/*#__PURE__*/_jsx(Edit,{})}),/*#__PURE__*/_jsx(IconButton,{color:\"primary\",onClick:()=>handleOpenAssign(admin),children:\"+\"})]})]},admin.adminUserId))})]})}),/*#__PURE__*/_jsx(AdministradorForm,{open:openForm,handleClose:handleCloseForm,handleSave:fetchAdministradores,adminData:selectedAdmin}),/*#__PURE__*/_jsx(AsignarAdministrador,{open:openAssign,handleClose:handleCloseAssign,handleSave:fetchAdministradores// 🔹 Ahora actualiza la lista después de asignar\n,adminData:selectedAdmin})]});}export default Administradores;","map":{"version":3,"names":["React","useEffect","useState","Box","Typography","Button","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","IconButton","Edit","Add","LoaderOverlay","CustomAlert","AsignarAdministrador","AdministradorForm","API_URL","jsx","_jsx","jsxs","_jsxs","Administradores","administradores","setAdministradores","loading","setLoading","alert","setAlert","severity","message","selectedAdmin","setSelectedAdmin","openForm","setOpenForm","openAssign","setOpenAssign","fetchAdministradores","token","localStorage","getItem","response","fetch","headers","Authorization","Accept","ok","Error","data","json","error","console","handleOpenForm","admin","arguments","length","undefined","handleCloseForm","handleOpenAssign","handleCloseAssign","sx","padding","children","variant","color","startIcon","mt","onClick","component","map","email","assignedGyms","gym","nombre","join","adminUserId","open","handleClose","handleSave","adminData"],"sources":["/Users/fernandovargas/Documents/GitHub/gymfront/src/pages/superadmin/Administradores.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  IconButton,\n} from \"@mui/material\";\nimport { Edit, Add } from \"@mui/icons-material\";\nimport LoaderOverlay from \"../../components/LoaderOverlay\";\nimport CustomAlert from \"../../components/CustomAlert\";\nimport AsignarAdministrador from \"../../components/AsignarAdministrador\";\nimport AdministradorForm from \"../../components/AdministradorForm\";\nimport { API_URL } from '../../services/api'; // Importa la constante API_URL\n\nfunction Administradores() {\n  const [administradores, setAdministradores] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [alert, setAlert] = useState({ severity: \"\", message: \"\" });\n  const [selectedAdmin, setSelectedAdmin] = useState(null);\n  const [openForm, setOpenForm] = useState(false);\n  const [openAssign, setOpenAssign] = useState(false);\n\n  // 🔹 Obtener administradores desde la API\n  const fetchAdministradores = async () => {\n    setLoading(true);\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return;\n\n      const response = await fetch(`${API_URL}/Administradores`, {\n        headers: { Authorization: `Bearer ${token}`, Accept: \"application/json\" },\n      });\n\n      if (!response.ok) throw new Error(\"Error al obtener administradores\");\n\n      const data = await response.json();\n      setAdministradores(data);\n    } catch (error) {\n      console.error(error);\n      setAlert({ severity: \"error\", message: \"Error al cargar administradores.\" });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAdministradores();\n  }, []);\n\n  // 🔹 Abrir modal de creación/edición\n  const handleOpenForm = (admin = null) => {\n    setSelectedAdmin(admin);\n    setOpenForm(true);\n  };\n\n  const handleCloseForm = () => {\n    setOpenForm(false);\n    fetchAdministradores(); // Recargar lista después de cerrar el modal\n  };\n\n  // 🔹 Abrir modal de asignación\n  const handleOpenAssign = (admin) => {\n    setSelectedAdmin(admin);\n    setOpenAssign(true);\n  };\n\n  // 🔹 Cerrar modal de asignación y recargar lista\n  const handleCloseAssign = () => {\n    setOpenAssign(false);\n    fetchAdministradores(); // Recargar lista después de asignar\n  };\n\n  return (\n    <Box sx={{ padding: 3 }}>\n      {loading && <LoaderOverlay />}\n      <CustomAlert severity={alert.severity} message={alert.message} />\n\n      <Typography variant=\"h4\" color=\"primary\">Administradores</Typography>\n\n      <Button variant=\"contained\" color=\"primary\" startIcon={<Add />} sx={{ mt: 2 }} onClick={() => handleOpenForm()}>\n        Agregar Administrador\n      </Button>\n\n      <TableContainer component={Paper} sx={{ mt: 3 }}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell><strong>Email</strong></TableCell>\n              <TableCell><strong>Gimnasios Asignados</strong></TableCell>\n              <TableCell><strong>Acciones</strong></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {administradores.map((admin) => (\n              <TableRow key={admin.adminUserId}>\n                <TableCell>{admin.email}</TableCell>\n                <TableCell>\n                  {admin.assignedGyms.length > 0\n                    ? admin.assignedGyms.map((gym) => gym.nombre).join(\", \")\n                    : \"Ninguno\"}\n                </TableCell>\n                <TableCell>\n                  <IconButton color=\"warning\" onClick={() => handleOpenForm(admin)}><Edit /></IconButton>\n                  <IconButton color=\"primary\" onClick={() => handleOpenAssign(admin)}>+</IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Modal de Crear/Editar Administrador */}\n      <AdministradorForm \n        open={openForm} \n        handleClose={handleCloseForm} \n        handleSave={fetchAdministradores} \n        adminData={selectedAdmin} \n      />\n\n      {/* Modal de Asignar Administrador a Gimnasio */}\n      <AsignarAdministrador \n        open={openAssign} \n        handleClose={handleCloseAssign} \n        handleSave={fetchAdministradores} // 🔹 Ahora actualiza la lista después de asignar\n        adminData={selectedAdmin} \n      />\n    </Box>\n  );\n}\n\nexport default Administradores;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}